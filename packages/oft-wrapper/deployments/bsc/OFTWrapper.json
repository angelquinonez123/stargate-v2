{
  "address": "0x86355F02119bdBC28ED6A4D5E0cA327Ca7730fFF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultBps",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oft",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WrapperFeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes2",
          "name": "partnerId",
          "type": "bytes2"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wrapperFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "callerFee",
          "type": "uint256"
        }
      ],
      "name": "WrapperFees",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BPS_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "estimateSendFeeV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_callerBps",
          "type": "uint256"
        }
      ],
      "name": "getAmountAndFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wrapperFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "callerFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oftBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendOFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendOFTFeeV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendOFTV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyOft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendProxyOFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyOft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendProxyOFTFeeV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyOft",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "_toAddress",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "refundAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zroPaymentAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "adapterParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICommonOFT.LzCallParams",
          "name": "_callParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "callerBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "bytes2",
              "name": "partnerId",
              "type": "bytes2"
            }
          ],
          "internalType": "struct IOFTWrapper.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "sendProxyOFTV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_defaultBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setOFTBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf55b70337dcbafa0c7e383146bec04b8eb6db8f40e3a598e45bcb7ef3944c1c",
  "receipt": {
    "to": null,
    "from": "0xED20c81Dc8A28769eA14E3FfbD782967Cc53BB28",
    "contractAddress": "0x86355F02119bdBC28ED6A4D5E0cA327Ca7730fFF",
    "transactionIndex": 50,
    "gasUsed": "1665996",
    "logsBloom": "0x
    "blockHash": "0x9af17460d3a7fd08ab4a3593e139b0782e6e94f9baef32984c5bcd47875290e8",
    "transactionHash": "0xbf55b70337dcbafa0c7e383146bec04b8eb6db8f40e3a598e45bcb7ef3944c1c",
    "logs": [
      {
        "transactionIndex": 50,
        "blockNumber": 27836022,
        "transactionHash": "0xbf55b70337dcbafa0c7e383146bec04b8eb6db8f40e3a598e45bcb7ef3944c1c",
        "address": "0x86355F02119bdBC28ED6A4D5E0cA327Ca7730fFF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ed20c81dc8a28769ea14e3ffbd782967cc53bb28"
        ],
        "data": "0x",
        "logIndex": 189,
        "blockHash": "0x9af17460d3a7fd08ab4a3593e139b0782e6e94f9baef32984c5bcd47875290e8"
      }
    ],
    "blockNumber": 27836022,
    "cumulativeGasUsed": "9657602",
    "status": 1,
    "byzantium": true
  },
  "args": [2],
  "numDeployments": 5,
  "solcInputHash": "92727330067b366c660fa4726773ba09",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultBps\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WrapperFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wrapperFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callerFee\",\"type\":\"uint256\"}],\"name\":\"WrapperFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"estimateSendFeeV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_callerBps\",\"type\":\"uint256\"}],\"name\":\"getAmountAndFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrapperFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callerFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oftBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendOFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendOFTFeeV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendOFTV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyOft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendProxyOFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyOft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendProxyOFTFeeV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyOft\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"_toAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"adapterParams\",\"type\":\"bytes\"}],\"internalType\":\"struct ICommonOFT.LzCallParams\",\"name\":\"_callParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"callerBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"internalType\":\"struct IOFTWrapper.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"sendProxyOFTV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setOFTBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OFTWrapper.sol\":\"OFTWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/token/oft/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the OFT standard\\n */\\ninterface IOFT is IOFTCore, IERC20 {\\n\\n}\\n\",\"keccak256\":\"0x102ab1f2484ffa58d3b913e469529e10a4843c655c529c9614468d1e9cf0ff8c\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/IOFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCore is IERC165 {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\",\"keccak256\":\"0xc19c158682e42cad701a6c1f70011b039a2f928b3b491377af981bd5ffebbab8\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/ICommonOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface ICommonOFT is IERC165 {\\n\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1d034ba786436c1fce8057352c87373098bd1d8026b24c8fbc7be28636d0c15d\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/IOFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTV2 is ICommonOFT {\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\\n}\\n\",\"keccak256\":\"0xb1d31f341715347d49db4e2c0de27c49bbd70b5b3d9b0adb1050b2b3a305ab87\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/fee/IOFTWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTWithFee is ICommonOFT {\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_minAmount` the minimum amount of tokens to receive on dstChain\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, LzCallParams calldata _callParams) external payable;\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\\n}\\n\",\"keccak256\":\"0x1b86d8e77c99346edadfb4ee06f6a5c88ca3b777474cc9f13b88514fe7b9215c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/OFTWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/IOFTV2.sol\\\";\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/fee/IOFTWithFee.sol\\\";\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/IOFT.sol\\\";\\nimport \\\"./interfaces/IOFTWrapper.sol\\\";\\n\\ncontract OFTWrapper is IOFTWrapper, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IOFT;\\n\\n    uint256 public constant BPS_DENOMINATOR = 10000;\\n    uint256 public constant MAX_UINT = 2**256 - 1; // indicates a bp fee of 0 that overrides the default bps\\n\\n    uint256 public defaultBps;\\n    mapping(address => uint256) public oftBps;\\n\\n    constructor(uint256 _defaultBps) {\\n        require(_defaultBps < BPS_DENOMINATOR, \\\"OFTWrapper: defaultBps >= 100%\\\");\\n        defaultBps = _defaultBps;\\n    }\\n\\n    function setDefaultBps(uint256 _defaultBps) external onlyOwner {\\n        require(_defaultBps < BPS_DENOMINATOR, \\\"OFTWrapper: defaultBps >= 100%\\\");\\n        defaultBps = _defaultBps;\\n    }\\n\\n    function setOFTBps(address _token, uint256 _bps) external onlyOwner {\\n        require(_bps < BPS_DENOMINATOR || _bps == MAX_UINT, \\\"OFTWrapper: oftBps[_oft] >= 100%\\\");\\n        oftBps[_token] = _bps;\\n    }\\n\\n    function withdrawFees(\\n        address _oft,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IOFT(_oft).safeTransfer(_to, _amount);\\n        emit WrapperFeeWithdrawn(_oft, _to, _amount);\\n    }\\n\\n    function sendOFT(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        uint256 amountToSwap = _getAmountAndPayFee(_oft, _amount, _minAmount, _feeObj);\\n        IOFT(_oft).sendFrom{value: msg.value}(msg.sender, _dstChainId, _toAddress, amountToSwap, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function sendProxyOFT(\\n        address _proxyOft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        address token = IOFTV2(_proxyOft).token();\\n        {\\n            uint256 amountToSwap = _getAmountAndPayFeeProxy(token, _amount, _minAmount, _feeObj);\\n\\n            // approve proxy to spend tokens\\n            IOFT(token).safeApprove(_proxyOft, amountToSwap);\\n            IOFT(_proxyOft).sendFrom{value: msg.value}(address(this), _dstChainId, _toAddress, amountToSwap, _refundAddress, _zroPaymentAddress, _adapterParams);\\n        }\\n\\n        // reset allowance if sendFrom() does not consume full amount\\n        if (IOFT(token).allowance(address(this), _proxyOft) > 0) IOFT(token).safeApprove(_proxyOft, 0);\\n    }\\n\\n    function sendOFTV2(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        uint256 amountToSwap = _getAmountAndPayFee(_oft, _amount, _minAmount, _feeObj);\\n        IOFTV2(_oft).sendFrom{value: msg.value}(msg.sender, _dstChainId, _toAddress, amountToSwap, _callParams);\\n    }\\n\\n    function sendOFTFeeV2(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        uint256 amountToSwap = _getAmountAndPayFee(_oft, _amount, _minAmount, _feeObj);\\n        IOFTWithFee(_oft).sendFrom{value: msg.value}(msg.sender, _dstChainId, _toAddress, amountToSwap, _minAmount, _callParams);\\n    }\\n\\n    function sendProxyOFTV2(\\n        address _proxyOft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        address token = IOFTV2(_proxyOft).token();\\n        uint256 amountToSwap = _getAmountAndPayFeeProxy(token, _amount, _minAmount, _feeObj);\\n\\n        // approve proxy to spend tokens\\n        IOFT(token).safeApprove(_proxyOft, amountToSwap);\\n        IOFTV2(_proxyOft).sendFrom{value: msg.value}(address(this), _dstChainId, _toAddress, amountToSwap, _callParams);\\n\\n        // reset allowance if sendFrom() does not consume full amount\\n        if (IOFT(token).allowance(address(this), _proxyOft) > 0) IOFT(token).safeApprove(_proxyOft, 0);\\n    }\\n\\n    function sendProxyOFTFeeV2(\\n        address _proxyOft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable nonReentrant {\\n        address token = IOFTV2(_proxyOft).token();\\n        uint256 amountToSwap = _getAmountAndPayFeeProxy(token, _amount, _minAmount, _feeObj);\\n\\n        // approve proxy to spend tokens\\n        IOFT(token).safeApprove(_proxyOft, amountToSwap);\\n        IOFTWithFee(_proxyOft).sendFrom{value: msg.value}(address(this), _dstChainId, _toAddress, amountToSwap, _minAmount, _callParams);\\n\\n        // reset allowance if sendFrom() does not consume full amount\\n        if (IOFT(token).allowance(address(this), _proxyOft) > 0) IOFT(token).safeApprove(_proxyOft, 0);\\n    }\\n\\n    function _getAmountAndPayFeeProxy(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        FeeObj calldata _feeObj\\n    ) internal returns (uint256) {\\n        (uint256 amountToSwap, uint256 wrapperFee, uint256 callerFee) = getAmountAndFees(_token, _amount, _feeObj.callerBps);\\n        require(amountToSwap >= _minAmount && amountToSwap > 0, \\\"OFTWrapper: not enough amountToSwap\\\");\\n\\n        IOFT(_token).safeTransferFrom(msg.sender, address(this), amountToSwap + wrapperFee); // pay wrapper and move proxy tokens to contract\\n        if (callerFee > 0) IOFT(_token).safeTransferFrom(msg.sender, _feeObj.caller, callerFee); // pay caller\\n\\n        emit WrapperFees(_feeObj.partnerId, _token, wrapperFee, callerFee);\\n\\n        return amountToSwap;\\n    }\\n\\n    function _getAmountAndPayFee(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minAmount,\\n        FeeObj calldata _feeObj\\n    ) internal returns (uint256) {\\n        (uint256 amountToSwap, uint256 wrapperFee, uint256 callerFee) = getAmountAndFees(_token, _amount, _feeObj.callerBps);\\n        require(amountToSwap >= _minAmount && amountToSwap > 0, \\\"OFTWrapper: not enough amountToSwap\\\");\\n\\n        if (wrapperFee > 0) IOFT(_token).safeTransferFrom(msg.sender, address(this), wrapperFee); // pay wrapper\\n        if (callerFee > 0) IOFT(_token).safeTransferFrom(msg.sender, _feeObj.caller, callerFee); // pay caller\\n\\n        emit WrapperFees(_feeObj.partnerId, _token, wrapperFee, callerFee);\\n\\n        return amountToSwap;\\n    }\\n\\n    function getAmountAndFees(\\n        address _token, // will be the token on proxies, and the oft on non-proxy\\n        uint256 _amount,\\n        uint256 _callerBps\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 amount,\\n            uint256 wrapperFee,\\n            uint256 callerFee\\n        )\\n    {\\n        uint256 wrapperBps;\\n\\n        if (oftBps[_token] == MAX_UINT) {\\n            wrapperBps = 0;\\n        } else if (oftBps[_token] > 0) {\\n            wrapperBps = oftBps[_token];\\n        } else {\\n            wrapperBps = defaultBps;\\n        }\\n\\n        require(wrapperBps + _callerBps < BPS_DENOMINATOR, \\\"OFTWrapper: Fee bps >= 100%\\\");\\n\\n        wrapperFee = wrapperBps > 0 ? (_amount * wrapperBps) / BPS_DENOMINATOR : 0;\\n        callerFee = _callerBps > 0 ? (_amount * _callerBps) / BPS_DENOMINATOR : 0;\\n        amount = wrapperFee > 0 || callerFee > 0 ? _amount - wrapperFee - callerFee : _amount;\\n    }\\n\\n    function estimateSendFee(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external view override returns (uint nativeFee, uint zroFee) {\\n        (uint256 amount, , ) = getAmountAndFees(_oft, _amount, _feeObj.callerBps);\\n\\n        return IOFT(_oft).estimateSendFee(_dstChainId, _toAddress, amount, _useZro, _adapterParams);\\n    }\\n\\n    function estimateSendFeeV2(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint256 _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external view override returns (uint nativeFee, uint zroFee) {\\n        (uint256 amount, , ) = getAmountAndFees(_oft, _amount, _feeObj.callerBps);\\n\\n        return IOFTV2(_oft).estimateSendFee(_dstChainId, _toAddress, amount, _useZro, _adapterParams);\\n    }\\n}\\n\",\"keccak256\":\"0x5695e2cfd667f5388d09d227c202ad8077d42241f11fa42c679a9e9e941dedbd\",\"license\":\"MIT\"},\"contracts/interfaces/IOFTWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@layerzerolabs/solidity-examples/contracts/token/oft/v2/IOFTV2.sol\\\";\\n\\ninterface IOFTWrapper {\\n    event WrapperFees(bytes2 indexed partnerId, address token, uint256 wrapperFee, uint256 callerFee);\\n    event WrapperFeeWithdrawn(address indexed oft, address to, uint256 amount);\\n\\n    struct FeeObj {\\n        uint256 callerBps;\\n        address caller;\\n        bytes2 partnerId;\\n    }\\n\\n    function sendOFT(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        uint256 _minAmount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n    function sendOFTV2(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n    function sendProxyOFTV2(\\n        address _proxyOft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n    function sendProxyOFTFeeV2(\\n        address _proxyOft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        uint256 _minAmount,\\n        IOFTV2.LzCallParams calldata _callParams,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n    function getAmountAndFees(\\n        address _oft,\\n        uint256 _amount,\\n        uint256 _callerBps\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 wrapperFee,\\n            uint256 callerFee\\n        );\\n\\n    function estimateSendFee(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendFeeV2(\\n        address _oft,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams,\\n        FeeObj calldata _feeObj\\n    ) external view returns (uint nativeFee, uint zroFee);\\n}\\n\",\"keccak256\":\"0x608a58cd3ebb6c8c46da08abeb80a65b2905e78d386f2f74b1408c721d893e07\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162001d0e38038062001d0e833981016040819052610031916100eb565b61003a3361009b565b6001805561271081106100935760405162461bcd60e51b815260206004820152601e60248201527f4f4654577261707065723a2064656661756c74427073203e3d20313030250000604482015260640160405180910390fd5b600255610104565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100fd57600080fd5b5051919050565b611bfa80620001146000396000f3fe6080604052600436106101145760003560e01c8063a46d74bc116100a0578063e1a4521811610064578063e1a45218146102d0578063e1bafc80146102e6578063e55dc4e614610306578063e5b5019a14610326578063f2fde38b1461033c57600080fd5b8063a46d74bc14610261578063a8198c0014610281578063c3c8032a14610294578063d1b308dc146102a7578063dda16a10146102bd57600080fd5b80637a751182116100e75780637a751182146101a357806385154849146101de5780638bcb586c146101f15780638d8c915c146102045780638da5cb5b1461023957600080fd5b80630c3d27561461011957806317696f641461013b578063498eff641461017b578063715018a61461018e575b600080fd5b34801561012557600080fd5b5061013961013436600461138a565b61035c565b005b34801561014757600080fd5b5061015b6101563660046113b6565b6103e2565b604080519384526020840192909252908201526060015b60405180910390f35b61013961018936600461145e565b610538565b34801561019a57600080fd5b506101396105d6565b3480156101af57600080fd5b506101d06101be366004611542565b60036020526000908152604090205481565b604051908152602001610172565b6101396101ec366004611566565b6105ea565b6101396101ff366004611566565b61067e565b34801561021057600080fd5b5061022461021f366004611604565b610813565b60408051928352602083019190915201610172565b34801561024557600080fd5b506000546040516001600160a01b039091168152602001610172565b34801561026d57600080fd5b5061013961027c3660046116a3565b6108b0565b61013961028f366004611566565b61090e565b6101396102a236600461145e565b61095b565b3480156102b357600080fd5b506101d060025481565b6101396102cb366004611566565b610b08565b3480156102dc57600080fd5b506101d061271081565b3480156102f257600080fd5b506102246103013660046116bc565b610bd0565b34801561031257600080fd5b5061013961032136600461177f565b610c70565b34801561033257600080fd5b506101d060001981565b34801561034857600080fd5b50610139610357366004611542565b610cd7565b610364610d50565b612710811080610375575060001981145b6103c65760405162461bcd60e51b815260206004820181905260248201527f4f4654577261707065723a206f66744270735b5f6f66745d203e3d203130302560448201526064015b60405180910390fd5b6001600160a01b03909116600090815260036020526040902055565b6001600160a01b038316600090815260036020526040812054819081908190600019141561041257506000610454565b6001600160a01b0387166000908152600360205260409020541561044f57506001600160a01b038616600090815260036020526040902054610454565b506002545b61271061046186836117d6565b106104ae5760405162461bcd60e51b815260206004820152601b60248201527f4f4654577261707065723a2046656520627073203e3d2031303025000000000060448201526064016103bd565b600081116104bd5760006104d4565b6127106104ca82886117ee565b6104d4919061180d565b9250600085116104e55760006104fc565b6127106104f286886117ee565b6104fc919061180d565b9150600083118061050d5750600082115b610517578561052c565b81610522848861182f565b61052c919061182f565b93505093509350939050565b610540610daa565b600061054e8c898985610e04565b90508b6001600160a01b0316635190563634338e8e8e878d8d8d8d6040518b63ffffffff1660e01b815260040161058d9998979695949392919061186f565b6000604051808303818588803b1580156105a657600080fd5b505af11580156105ba573d6000803e3d6000fd5b5050505050506105c960018055565b5050505050505050505050565b6105de610d50565b6105e86000610f04565b565b6105f2610daa565b600061060088868685610e04565b9050876001600160a01b0316632cdf0b9534338a8a868a8a6040518863ffffffff1660e01b815260040161063996959493929190611966565b6000604051808303818588803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b50505050505061067560018055565b50505050505050565b610686610daa565b6000876001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ea91906119af565b905060006106fa82878786610f54565b90506107106001600160a01b0383168a83610fb8565b604051632cdf0b9560e01b81526001600160a01b038a1690632cdf0b959034906107489030908d908d9088908d908d90600401611966565b6000604051808303818588803b15801561076157600080fd5b505af1158015610775573d6000803e3d6000fd5b5050604051636eb1769f60e11b81523060048201526001600160a01b038d81166024830152600094508616925063dd62ed3e9150604401602060405180830381865afa1580156107c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ed91906119cc565b1115610808576108086001600160a01b0383168a6000610fb8565b505061067560018055565b600080806108238b8986356103e2565b5050604051630d94982d60e21b81529091506001600160a01b038c169063365260b49061085e908d908d9086908d908d908d906004016119e5565b6040805180830381865afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190611a17565b92509250509850989650505050505050565b6108b8610d50565b61271081106109095760405162461bcd60e51b815260206004820152601e60248201527f4f4654577261707065723a2064656661756c74427073203e3d2031303025000060448201526064016103bd565b600255565b610916610daa565b600061092488868685610e04565b9050876001600160a01b031663695ef6bf34338a8a86896040518763ffffffff1660e01b8152600401610639959493929190611a3b565b610963610daa565b60008b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c791906119af565b905060006109d7828a8a86610f54565b90506109ed6001600160a01b0383168e83610fb8565b8c6001600160a01b0316635190563634308f8f8f878e8e8e8e6040518b63ffffffff1660e01b8152600401610a2a9998979695949392919061186f565b6000604051808303818588803b158015610a4357600080fd5b505af1158015610a57573d6000803e3d6000fd5b5050505050506000816001600160a01b031663dd62ed3e308f6040518363ffffffff1660e01b8152600401610aa29291906001600160a01b0392831681529116602082015260400190565b602060405180830381865afa158015610abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae391906119cc565b1115610afe57610afe6001600160a01b0382168d6000610fb8565b506105c960018055565b610b10610daa565b6000876001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7491906119af565b90506000610b8482878786610f54565b9050610b9a6001600160a01b0383168a83610fb8565b60405163695ef6bf60e01b81526001600160a01b038a169063695ef6bf9034906107489030908d908d9088908c90600401611a3b565b60008080610be08c8986356103e2565b5050604051632a205e3d60e01b81529091506001600160a01b038d1690632a205e3d90610c1d908e908e908e9087908e908e908e90600401611a72565b6040805180830381865afa158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d9190611a17565b9250925050995099975050505050505050565b610c78610d50565b610c8c6001600160a01b0384168383611105565b604080516001600160a01b038481168252602082018490528516917ff6514f9f283faac4cf3f3a6a702c116227ad0f2c727fb336e4c10b418bc6d613910160405180910390a2505050565b610cdf610d50565b6001600160a01b038116610d445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103bd565b610d4d81610f04565b50565b6000546001600160a01b031633146105e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103bd565b60026001541415610dfd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103bd565b6002600155565b6000808080610e15888887356103e2565b925092509250858310158015610e2b5750600083115b610e475760405162461bcd60e51b81526004016103bd90611abf565b8115610e6257610e626001600160a01b038916333085611135565b8015610e8e57610e8e33610e7c6040880160208901611542565b6001600160a01b038b16919084611135565b610e9e6060860160408701611b02565b604080516001600160a01b038b168152602081018590529081018390526001600160f01b031991909116907f97bcdc1dd7ab82ef93280983f23d391afea463d0333fddd1a4617693b9ccfeea9060600160405180910390a250909150505b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808080610f65888887356103e2565b925092509250858310158015610f7b5750600083115b610f975760405162461bcd60e51b81526004016103bd90611abf565b610e623330610fa685876117d6565b6001600160a01b038c16929190611135565b8015806110325750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561100c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103091906119cc565b155b61109d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016103bd565b6040516001600160a01b03831660248201526044810182905261110090849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611173565b505050565b6040516001600160a01b03831660248201526044810182905261110090849063a9059cbb60e01b906064016110c9565b6040516001600160a01b038085166024830152831660448201526064810182905261116d9085906323b872dd60e01b906084016110c9565b50505050565b60006111c8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112459092919063ffffffff16565b80519091501561110057808060200190518101906111e69190611b2c565b6111005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103bd565b6060610efc848460008585600080866001600160a01b0316858760405161126c9190611b75565b60006040518083038185875af1925050503d80600081146112a9576040519150601f19603f3d011682016040523d82523d6000602084013e6112ae565b606091505b50915091506112bf878383876112ca565b979650505050505050565b6060831561133657825161132f576001600160a01b0385163b61132f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103bd565b5081610efc565b610efc838381511561134b5781518083602001fd5b8060405162461bcd60e51b81526004016103bd9190611b91565b6001600160a01b0381168114610d4d57600080fd5b803561138581611365565b919050565b6000806040838503121561139d57600080fd5b82356113a881611365565b946020939093013593505050565b6000806000606084860312156113cb57600080fd5b83356113d681611365565b95602085013595506040909401359392505050565b803561ffff8116811461138557600080fd5b60008083601f84011261140f57600080fd5b50813567ffffffffffffffff81111561142757600080fd5b60208301915083602082850101111561143f57600080fd5b9250929050565b60006060828403121561145857600080fd5b50919050565b60008060008060008060008060008060006101608c8e03121561148057600080fd5b61148a8c35611365565b8b359a5061149a60208d016113eb565b995067ffffffffffffffff8060408e013511156114b657600080fd5b6114c68e60408f01358f016113fd565b909a50985060608d0135975060808d013596506114e660a08e0135611365565b60a08d013595506114f960c08e0161137a565b94508060e08e0135111561150c57600080fd5b5061151d8d60e08e01358e016113fd565b90935091506115308d6101008e01611446565b90509295989b509295989b9093969950565b60006020828403121561155457600080fd5b813561155f81611365565b9392505050565b6000806000806000806000610120888a03121561158257600080fd5b873561158d81611365565b965061159b602089016113eb565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff8111156115cc57600080fd5b6115d88a828b01611446565b9250506115e88960c08a01611446565b905092959891949750929550565b8015158114610d4d57600080fd5b600080600080600080600080610120898b03121561162157600080fd5b883561162c81611365565b975061163a60208a016113eb565b965060408901359550606089013594506080890135611658816115f6565b935060a089013567ffffffffffffffff81111561167457600080fd5b6116808b828c016113fd565b909450925061169490508a60c08b01611446565b90509295985092959890939650565b6000602082840312156116b557600080fd5b5035919050565b60008060008060008060008060006101208a8c0312156116db57600080fd5b89356116e681611365565b98506116f460208b016113eb565b975060408a013567ffffffffffffffff8082111561171157600080fd5b61171d8d838e016113fd565b909950975060608c0135965060808c01359150611739826115f6565b90945060a08b0135908082111561174f57600080fd5b5061175c8c828d016113fd565b909450925061177090508b60c08c01611446565b90509295985092959850929598565b60008060006060848603121561179457600080fd5b833561179f81611365565b925060208401356117af81611365565b929592945050506040919091013590565b634e487b7160e01b600052601160045260246000fd5b600082198211156117e9576117e96117c0565b500190565b6000816000190483118215151615611808576118086117c0565b500290565b60008261182a57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611841576118416117c0565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060018060a01b03808c16835261ffff8b16602084015260e0604084015261189c60e084018a8c611846565b886060850152818816608085015281871660a085015283810360c08501526118c5818688611846565b9d9c50505050505050505050505050565b600081356118e381611365565b6001600160a01b0390811684526020830135906118ff82611365565b166020840152604082013536839003601e1901811261191d57600080fd5b8201803567ffffffffffffffff81111561193657600080fd5b80360384131561194557600080fd5b6060604086015261195d606086018260208501611846565b95945050505050565b60018060a01b038716815261ffff8616602082015284604082015283606082015282608082015260c060a082015260006119a360c08301846118d6565b98975050505050505050565b6000602082840312156119c157600080fd5b815161155f81611365565b6000602082840312156119de57600080fd5b5051919050565b61ffff87168152856020820152846040820152831515606082015260a0608082015260006119a360a083018486611846565b60008060408385031215611a2a57600080fd5b505080516020909101519092909150565b60018060a01b038616815261ffff8516602082015283604082015282606082015260a0608082015260006112bf60a08301846118d6565b61ffff8816815260a060208201526000611a9060a08301888a611846565b86604084015285151560608401528281036080840152611ab1818587611846565b9a9950505050505050505050565b60208082526023908201527f4f4654577261707065723a206e6f7420656e6f75676820616d6f756e74546f5360408201526207761760ec1b606082015260800190565b600060208284031215611b1457600080fd5b81356001600160f01b03198116811461155f57600080fd5b600060208284031215611b3e57600080fd5b815161155f816115f6565b60005b83811015611b64578181015183820152602001611b4c565b8381111561116d5750506000910152565b60008251611b87818460208701611b49565b9190910192915050565b6020815260008251806020840152611bb0816040850160208701611b49565b601f01601f1916919091016040019291505056fea26469706673582212206d8b0a636b25fa76deabcb0a517df56eada041f7bd0fd256b4894ea86cb77a3764736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c8063a46d74bc116100a0578063e1a4521811610064578063e1a45218146102d0578063e1bafc80146102e6578063e55dc4e614610306578063e5b5019a14610326578063f2fde38b1461033c57600080fd5b8063a46d74bc14610261578063a8198c0014610281578063c3c8032a14610294578063d1b308dc146102a7578063dda16a10146102bd57600080fd5b80637a751182116100e75780637a751182146101a357806385154849146101de5780638bcb586c146101f15780638d8c915c146102045780638da5cb5b1461023957600080fd5b80630c3d27561461011957806317696f641461013b578063498eff641461017b578063715018a61461018e575b600080fd5b34801561012557600080fd5b5061013961013436600461138a565b61035c565b005b34801561014757600080fd5b5061015b6101563660046113b6565b6103e2565b604080519384526020840192909252908201526060015b60405180910390f35b61013961018936600461145e565b610538565b34801561019a57600080fd5b506101396105d6565b3480156101af57600080fd5b506101d06101be366004611542565b60036020526000908152604090205481565b604051908152602001610172565b6101396101ec366004611566565b6105ea565b6101396101ff366004611566565b61067e565b34801561021057600080fd5b5061022461021f366004611604565b610813565b60408051928352602083019190915201610172565b34801561024557600080fd5b506000546040516001600160a01b039091168152602001610172565b34801561026d57600080fd5b5061013961027c3660046116a3565b6108b0565b61013961028f366004611566565b61090e565b6101396102a236600461145e565b61095b565b3480156102b357600080fd5b506101d060025481565b6101396102cb366004611566565b610b08565b3480156102dc57600080fd5b506101d061271081565b3480156102f257600080fd5b506102246103013660046116bc565b610bd0565b34801561031257600080fd5b5061013961032136600461177f565b610c70565b34801561033257600080fd5b506101d060001981565b34801561034857600080fd5b50610139610357366004611542565b610cd7565b610364610d50565b612710811080610375575060001981145b6103c65760405162461bcd60e51b815260206004820181905260248201527f4f4654577261707065723a206f66744270735b5f6f66745d203e3d203130302560448201526064015b60405180910390fd5b6001600160a01b03909116600090815260036020526040902055565b6001600160a01b038316600090815260036020526040812054819081908190600019141561041257506000610454565b6001600160a01b0387166000908152600360205260409020541561044f57506001600160a01b038616600090815260036020526040902054610454565b506002545b61271061046186836117d6565b106104ae5760405162461bcd60e51b815260206004820152601b60248201527f4f4654577261707065723a2046656520627073203e3d2031303025000000000060448201526064016103bd565b600081116104bd5760006104d4565b6127106104ca82886117ee565b6104d4919061180d565b9250600085116104e55760006104fc565b6127106104f286886117ee565b6104fc919061180d565b9150600083118061050d5750600082115b610517578561052c565b81610522848861182f565b61052c919061182f565b93505093509350939050565b610540610daa565b600061054e8c898985610e04565b90508b6001600160a01b0316635190563634338e8e8e878d8d8d8d6040518b63ffffffff1660e01b815260040161058d9998979695949392919061186f565b6000604051808303818588803b1580156105a657600080fd5b505af11580156105ba573d6000803e3d6000fd5b5050505050506105c960018055565b5050505050505050505050565b6105de610d50565b6105e86000610f04565b565b6105f2610daa565b600061060088868685610e04565b9050876001600160a01b0316632cdf0b9534338a8a868a8a6040518863ffffffff1660e01b815260040161063996959493929190611966565b6000604051808303818588803b15801561065257600080fd5b505af1158015610666573d6000803e3d6000fd5b50505050505061067560018055565b50505050505050565b610686610daa565b6000876001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ea91906119af565b905060006106fa82878786610f54565b90506107106001600160a01b0383168a83610fb8565b604051632cdf0b9560e01b81526001600160a01b038a1690632cdf0b959034906107489030908d908d9088908d908d90600401611966565b6000604051808303818588803b15801561076157600080fd5b505af1158015610775573d6000803e3d6000fd5b5050604051636eb1769f60e11b81523060048201526001600160a01b038d81166024830152600094508616925063dd62ed3e9150604401602060405180830381865afa1580156107c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ed91906119cc565b1115610808576108086001600160a01b0383168a6000610fb8565b505061067560018055565b600080806108238b8986356103e2565b5050604051630d94982d60e21b81529091506001600160a01b038c169063365260b49061085e908d908d9086908d908d908d906004016119e5565b6040805180830381865afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190611a17565b92509250509850989650505050505050565b6108b8610d50565b61271081106109095760405162461bcd60e51b815260206004820152601e60248201527f4f4654577261707065723a2064656661756c74427073203e3d2031303025000060448201526064016103bd565b600255565b610916610daa565b600061092488868685610e04565b9050876001600160a01b031663695ef6bf34338a8a86896040518763ffffffff1660e01b8152600401610639959493929190611a3b565b610963610daa565b60008b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c791906119af565b905060006109d7828a8a86610f54565b90506109ed6001600160a01b0383168e83610fb8565b8c6001600160a01b0316635190563634308f8f8f878e8e8e8e6040518b63ffffffff1660e01b8152600401610a2a9998979695949392919061186f565b6000604051808303818588803b158015610a4357600080fd5b505af1158015610a57573d6000803e3d6000fd5b5050505050506000816001600160a01b031663dd62ed3e308f6040518363ffffffff1660e01b8152600401610aa29291906001600160a01b0392831681529116602082015260400190565b602060405180830381865afa158015610abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae391906119cc565b1115610afe57610afe6001600160a01b0382168d6000610fb8565b506105c960018055565b610b10610daa565b6000876001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7491906119af565b90506000610b8482878786610f54565b9050610b9a6001600160a01b0383168a83610fb8565b60405163695ef6bf60e01b81526001600160a01b038a169063695ef6bf9034906107489030908d908d9088908c90600401611a3b565b60008080610be08c8986356103e2565b5050604051632a205e3d60e01b81529091506001600160a01b038d1690632a205e3d90610c1d908e908e908e9087908e908e908e90600401611a72565b6040805180830381865afa158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d9190611a17565b9250925050995099975050505050505050565b610c78610d50565b610c8c6001600160a01b0384168383611105565b604080516001600160a01b038481168252602082018490528516917ff6514f9f283faac4cf3f3a6a702c116227ad0f2c727fb336e4c10b418bc6d613910160405180910390a2505050565b610cdf610d50565b6001600160a01b038116610d445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103bd565b610d4d81610f04565b50565b6000546001600160a01b031633146105e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103bd565b60026001541415610dfd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103bd565b6002600155565b6000808080610e15888887356103e2565b925092509250858310158015610e2b5750600083115b610e475760405162461bcd60e51b81526004016103bd90611abf565b8115610e6257610e626001600160a01b038916333085611135565b8015610e8e57610e8e33610e7c6040880160208901611542565b6001600160a01b038b16919084611135565b610e9e6060860160408701611b02565b604080516001600160a01b038b168152602081018590529081018390526001600160f01b031991909116907f97bcdc1dd7ab82ef93280983f23d391afea463d0333fddd1a4617693b9ccfeea9060600160405180910390a250909150505b949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000808080610f65888887356103e2565b925092509250858310158015610f7b5750600083115b610f975760405162461bcd60e51b81526004016103bd90611abf565b610e623330610fa685876117d6565b6001600160a01b038c16929190611135565b8015806110325750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561100c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103091906119cc565b155b61109d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016103bd565b6040516001600160a01b03831660248201526044810182905261110090849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611173565b505050565b6040516001600160a01b03831660248201526044810182905261110090849063a9059cbb60e01b906064016110c9565b6040516001600160a01b038085166024830152831660448201526064810182905261116d9085906323b872dd60e01b906084016110c9565b50505050565b60006111c8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112459092919063ffffffff16565b80519091501561110057808060200190518101906111e69190611b2c565b6111005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103bd565b6060610efc848460008585600080866001600160a01b0316858760405161126c9190611b75565b60006040518083038185875af1925050503d80600081146112a9576040519150601f19603f3d011682016040523d82523d6000602084013e6112ae565b606091505b50915091506112bf878383876112ca565b979650505050505050565b6060831561133657825161132f576001600160a01b0385163b61132f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103bd565b5081610efc565b610efc838381511561134b5781518083602001fd5b8060405162461bcd60e51b81526004016103bd9190611b91565b6001600160a01b0381168114610d4d57600080fd5b803561138581611365565b919050565b6000806040838503121561139d57600080fd5b82356113a881611365565b946020939093013593505050565b6000806000606084860312156113cb57600080fd5b83356113d681611365565b95602085013595506040909401359392505050565b803561ffff8116811461138557600080fd5b60008083601f84011261140f57600080fd5b50813567ffffffffffffffff81111561142757600080fd5b60208301915083602082850101111561143f57600080fd5b9250929050565b60006060828403121561145857600080fd5b50919050565b60008060008060008060008060008060006101608c8e03121561148057600080fd5b61148a8c35611365565b8b359a5061149a60208d016113eb565b995067ffffffffffffffff8060408e013511156114b657600080fd5b6114c68e60408f01358f016113fd565b909a50985060608d0135975060808d013596506114e660a08e0135611365565b60a08d013595506114f960c08e0161137a565b94508060e08e0135111561150c57600080fd5b5061151d8d60e08e01358e016113fd565b90935091506115308d6101008e01611446565b90509295989b509295989b9093969950565b60006020828403121561155457600080fd5b813561155f81611365565b9392505050565b6000806000806000806000610120888a03121561158257600080fd5b873561158d81611365565b965061159b602089016113eb565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff8111156115cc57600080fd5b6115d88a828b01611446565b9250506115e88960c08a01611446565b905092959891949750929550565b8015158114610d4d57600080fd5b600080600080600080600080610120898b03121561162157600080fd5b883561162c81611365565b975061163a60208a016113eb565b965060408901359550606089013594506080890135611658816115f6565b935060a089013567ffffffffffffffff81111561167457600080fd5b6116808b828c016113fd565b909450925061169490508a60c08b01611446565b90509295985092959890939650565b6000602082840312156116b557600080fd5b5035919050565b60008060008060008060008060006101208a8c0312156116db57600080fd5b89356116e681611365565b98506116f460208b016113eb565b975060408a013567ffffffffffffffff8082111561171157600080fd5b61171d8d838e016113fd565b909950975060608c0135965060808c01359150611739826115f6565b90945060a08b0135908082111561174f57600080fd5b5061175c8c828d016113fd565b909450925061177090508b60c08c01611446565b90509295985092959850929598565b60008060006060848603121561179457600080fd5b833561179f81611365565b925060208401356117af81611365565b929592945050506040919091013590565b634e487b7160e01b600052601160045260246000fd5b600082198211156117e9576117e96117c0565b500190565b6000816000190483118215151615611808576118086117c0565b500290565b60008261182a57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611841576118416117c0565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600060018060a01b03808c16835261ffff8b16602084015260e0604084015261189c60e084018a8c611846565b886060850152818816608085015281871660a085015283810360c08501526118c5818688611846565b9d9c50505050505050505050505050565b600081356118e381611365565b6001600160a01b0390811684526020830135906118ff82611365565b166020840152604082013536839003601e1901811261191d57600080fd5b8201803567ffffffffffffffff81111561193657600080fd5b80360384131561194557600080fd5b6060604086015261195d606086018260208501611846565b95945050505050565b60018060a01b038716815261ffff8616602082015284604082015283606082015282608082015260c060a082015260006119a360c08301846118d6565b98975050505050505050565b6000602082840312156119c157600080fd5b815161155f81611365565b6000602082840312156119de57600080fd5b5051919050565b61ffff87168152856020820152846040820152831515606082015260a0608082015260006119a360a083018486611846565b60008060408385031215611a2a57600080fd5b505080516020909101519092909150565b60018060a01b038616815261ffff8516602082015283604082015282606082015260a0608082015260006112bf60a08301846118d6565b61ffff8816815260a060208201526000611a9060a08301888a611846565b86604084015285151560608401528281036080840152611ab1818587611846565b9a9950505050505050505050565b60208082526023908201527f4f4654577261707065723a206e6f7420656e6f75676820616d6f756e74546f5360408201526207761760ec1b606082015260800190565b600060208284031215611b1457600080fd5b81356001600160f01b03198116811461155f57600080fd5b600060208284031215611b3e57600080fd5b815161155f816115f6565b60005b83811015611b64578181015183820152602001611b4c565b8381111561116d5750506000910152565b60008251611b87818460208701611b49565b9190910192915050565b6020815260008251806020840152611bb0816040850160208701611b49565b601f01601f1916919091016040019291505056fea26469706673582212206d8b0a636b25fa76deabcb0a517df56eada041f7bd0fd256b4894ea86cb77a3764736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 245,
        "contract": "contracts/OFTWrapper.sol:OFTWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 361,
        "contract": "contracts/OFTWrapper.sol:OFTWrapper",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1194,
        "contract": "contracts/OFTWrapper.sol:OFTWrapper",
        "label": "defaultBps",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1198,
        "contract": "contracts/OFTWrapper.sol:OFTWrapper",
        "label": "oftBps",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
